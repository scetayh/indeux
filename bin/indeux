#!/bin/bash
 
################################################################
## compiler: ssc-0.0.1
## host: Darwin YupyeSortaco.local 24.1.0 Darwin Kernel Version 24.1.0: Tue Sep 17 07:48:04 PDT 2024; root:xnu-11215.40.59~38/RELEASE_ARM64_T8112 arm64 arm Darwin
## date: 20241026T220614Z
################################################################
 
#!/bin/bash

#.soras 0

Indeux_CheckPermission () 
{ 
    if [ "$(whoami)" != "root" ]; then
        echo "indeux must be runned as root.";
        exit 1;
    fi
}
Indeux_Init () 
{ 
    echo "* Copying necessary files...";
    mkdir -p ./.indeux/;
    cp /usr/local/share/doc/indeux/indeux.conf.example ./.indeux/indeux.conf;
    echo "* Directory inited for indeux."
}
Indeux_InterateForDirectories () 
{ 
    echo "$1"/;
    for i in $(ls "$1");
    do
        if [[ -d $1"/"$i ]]; then
            Indeux_InterateForDirectories "$1""/""$i";
        fi;
    done
}
Indeux_PrintBrand () 
{ 
    echo "_______________________________________________________________";
    echo "|                            indeux                             |";
    echo "|            <github.com/Tarikko-ScetayhChan/indeux>            |";
    echo "|                                                               |";
    echo "|              Copyright 2024 Tarikko-ScetayhChan               |";
    echo "|                  <weychon_lyon@outlook.com>                   |";
    echo "|                <blog.tarikko-scetayhchan.top>                 |";
    echo "|===============================================================|";
    echo "|                                                               |";
    echo "| This program is free software: you can redistribute it and/or |";
    echo "| modify it under the terms of the GNU General Public License   |";
    echo "| as published by the Free Software Foundation, either version  |";
    echo "| 3 of the License, or (at your option) any later version.      |";
    echo "|                                                               |";
    echo "| This program is distributed in the hope that it will be       |";
    echo "| useful, but WITHOUT ANY WARRANTY; without even the implied    |";
    echo "| warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR       |";
    echo "| PURPOSE. See the GNU General Public License for more details. |";
    echo "| You should have received a copy of the GNU General Public     |";
    echo "| License along with this program. If not, see                  |";
    echo "| <https://www.gnu.org/licenses/>.                              |";
    echo "|                                                               |";
    echo "|_______________________________________________________________|"
}
Indeux_PrintUsage () 
{ 
    echo "Usage: indeux [ init | remove | version | gen ]"
}
Indeux_RemoveIndex () 
{ 
    echo -e "* Removing index:";
    find . -name 'index.html' -type f -print -exec rm -rf {} \;;
    echo
}
Slibsh_PrintMessage () 
{ 
    echo -n "$1: ";
    [[ "$2" = d* ]] && echo -en "\e[1m\e[037mdebug: \e[0m";
    [[ "$2" = i* ]] && echo -en "\e[1m\e[092minfo: \e[0m";
    [[ "$2" = w* ]] && echo -en "\e[1m\e[093mwarning: \e[0m";
    [[ "$2" = e* ]] && echo -en "\e[1m\e[091merror: \e[0m";
    [[ "$2" = f* ]] && echo -en "\e[1m\e[031mfafal: \e[0m";
    echo "$3"
}
Slibsh_PrintMessage_Debug () 
{ 
    Slibsh_PrintMessage "$1" d "$2"
}
Slibsh_PrintMessage_Error () 
{ 
    Slibsh_PrintMessage "$1" e "$2"
}
Slibsh_PrintMessage_Fafal () 
{ 
    Slibsh_PrintMessage "$1" f "$2"
}
Slibsh_PrintMessage_Fafal_InvalidExtensionName () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "Invalid extension name in \`$2'."
}
Slibsh_PrintMessage_Fafal_ItemExists () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "\`$2' exists."
}
Slibsh_PrintMessage_Fafal_ItemNotFound () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "\`$2' not found."
}
Slibsh_PrintMessage_Fafal_SourceExpected () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "Source expected."
}
Slibsh_PrintMessage_Fafal_TargetExpected () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "Target expected."
}
Slibsh_PrintMessage_Fafal_TooManyArguments () 
{ 
    Slibsh_PrintMessage_Fafal "$1" "To many arguments."
}
Slibsh_PrintMessage_Info () 
{ 
    Slibsh_PrintMessage "$1" i "$2"
}
Slibsh_PrintMessage_Warning () 
{ 
    Slibsh_PrintMessage "$1" w "$2"
}
Ssc_CheckFiles () 
{ 
    [ ! -f "$ssc_source" ] && Slibsh_PrintMessage_Fafal_ItemNotFound "$0" "$ssc_source" && exit 1;
    [ -f "$ssc_target" ] && Slibsh_PrintMessage_Fafal_ItemExists "$0" "$ssc_target" && exit 1;
    [ ! "${ssc_source: -5}" = ".s.sh" ] && Slibsh_PrintMessage_Fafal_InvalidExtensionName "$0" "$ssc_source" && exit 1
}
Ssc_CheckParameters () 
{ 
    if [ "$#" -ne 2 ]; then
        if [ "$#" -eq 0 ]; then
            Slibsh_PrintMessage_Fafal_SourceExpected "$0";
        else
            if [ "$#" -eq 1 ]; then
                Slibsh_PrintMessage_Fafal_TargetExpected "$0";
            else
                if [ "$#" -gt 2 ]; then
                    Slibsh_PrintMessage_Fafal_TooManyArguments "$0";
                fi;
            fi;
        fi;
        exit 1;
    fi
}
Ssc_DeleteComments () 
{ 
    sed -i '/#/!b;s/^/\n/;ta;:a;s/\n$//;t;s/\n\(\("[^"]*"\)\|\('\''[^'\'']*'\''\)\)/\1\n/;ta;s/\n\([^#]\)/\1\n/;ta;s/\n.*//' "$1"
}
Ssc_PrintBrand () 
{ 
    echo "$ssc_name (SorasShell Compiler) v$ssc_version";
    echo "Copyright (C) 2024 Tarikko-ScetayhChan";
    echo "This is free software; see the source for copying conditions.  There is NO";
    echo "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
}
Ssc_WriteCompilationInformation () 
{ 
    sed -i "1i\################################################################" "$ssc_target";
    sed -i "1i\## date: $(date +%Y%m%dT%H%M%SZ)" "$ssc_target";
    sed -i "1i\## host: $(uname -a)" "$ssc_target";
    sed -i "1i\## compiler: $ssc_name-$ssc_version" "$ssc_target";
    sed -i "1i\################################################################" "$ssc_target";
    sed -i '1i\#!/bin/bash' "$ssc_target";
    sed -i '1a\ ' "$ssc_target";
    sed -i '7a\ ' "$ssc_target"
}

if [ "$1" = "init" ]; then {
    Indeux_CheckPermission;

    if [ ! -d "./.indeux" ]; then {
        Indeux_Init;

        exit 0;
    }
    else {
        Slibsh_PrintMessage_Fafal "$0" "This directory is already inited for indeux. If necessary, operate \`sudo rm -rf ./.indeux/'.";

        exit 1;
    }
    fi;
}
elif [ "$1" = "version" ]; then {
    Indeux_PrintBrand;

    exit 0;
}
elif [ "$1" = "remove" ]; then {
    Indeux_CheckPermission;

    Indeux_RemoveIndex;

    exit 0;
}
elif [ "$1" = "gen" ]; then {
    Indeux_CheckPermission;

    if [ ! -f "./.indeux/indeux.conf" ]; then {
        Slibsh_PrintMessage_Fafal "$0" "./.indeux/indeux.conf not found. Have you inited this directory for indeux?";

        exit 1;
    }
    fi;

    source ./.indeux/indeux.conf;

    Indeux_RemoveIndex;

    Indeux_InterateForDirectories . > ./.indeux/directories.txt
    echo -e "* Looking for directories:";
    cp ./.indeux/directories.txt "./.indeux/directories-$(date +%Y%m%dT%H%M%SZ).txt";
    cat ./.indeux/directories.txt;
    sed -i 's/..//' ./.indeux/directories.txt; # 删除每一行的前1个字符
    echo -e "* $(wc -l <./.indeux/directories.txt) directories in total.\n";

    echo "* Creating index:";
    if [ "$(wc -l <./.indeux/directories.txt)" -gt 0 ]; then {
        for ((i = 1; i <= $(wc -l <./.indeux/directories.txt); i++)); do {
            echo "./$(eval sed -n '${i}p' ./.indeux/directories.txt)index.html";
            # 写入各子目录.html索引
            {
                echo "<html lang=\"${indeux_htmlLang}\">"
                echo "    <head>"
                echo "        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">"
                echo "<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"${indeux_appleTouchIcon}\">"
                echo "<link rel=\"icon\" type=\"image/ico\" sizes=\"32x32\" href=\"${indeux_icon}\">"
                echo "        <title>${indeux_titlePrefix}$(eval sed -n ${i}p ./.indeux/directories.txt)</title>"
                echo "    </head>"
                echo "    <body style=\"background-color: ${indeux_backgroundColor}\">"
                #echo "    <link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&amp;display=swap&amp;subset=latin,latin-ext\">"
                echo "        <style type=\"text/css\">"
                echo "        body{"
                echo "            background: url("${indeux_background}") no-repeat center center fixed;"
                echo "            -webkit-background-size: cover;"
                echo "            -o-background-size: cover;  "
                echo "            background-size: cover;"
                echo "        }"
                echo "        </style>"
                echo "        <h1><font color="#af7ac5">☆</font> Index of /$(eval sed -n ${i}p ./.indeux/directories.txt)</h1>"
                echo "        <HR style=\"FILTER: alpha(opacity=100,finishopacity=0,style=1)\" width="100%" color=#987cb9 SIZE=3>"
                echo "        <pre>"
                echo "<a href=\"../\">../</a>"
            } >> "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/index.html";

            ls -1F "$(pwd)"/"$(eval sed -n '${i}p' ./.indeux/directories.txt)" >"./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt";

            sed -i 's/\*//' "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt"; # 去除星号

            if [ $(wc -l <"./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt") -gt 0 ]; then {
                for ((j = 1; j <= $(wc -l <"./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt"); j++)); do {
                    {
                        echo -n "<a href=\""
                        echo -n $(eval sed -n '${j}p' "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt")
                        echo -n "\">"
                        echo -n $(eval sed -n '${j}p' "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt")
                        echo "</a>"
                    } >> "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/index.html";
                }
                done;
            }
            fi;
            
            rm -f "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/.items.txt"

            {
                echo "        </pre>"
                echo "    </body>"
                echo "</html>"
            } >> "./$(eval sed -n '${i}p' ./.indeux/directories.txt)/index.html";
        } & \
        done
    }
    fi;
}
else {
    Indeux_PrintUsage;

    exit 1;
}
fi;